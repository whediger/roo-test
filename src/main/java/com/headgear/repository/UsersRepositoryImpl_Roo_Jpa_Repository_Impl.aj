// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.headgear.repository;

import com.headgear.QUsers;
import com.headgear.Users;
import com.headgear.repository.UsersRepositoryCustom;
import com.headgear.repository.UsersRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UsersRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: UsersRepositoryImpl implements UsersRepositoryCustom;
    
    declare @type: UsersRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UsersRepositoryImpl.FIRST_NAME = "firstName";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UsersRepositoryImpl.LAST_NAME = "lastName";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UsersRepositoryImpl.ACCOUNT = "account";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Users> UsersRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUsers users = QUsers.users;
        
        JPQLQuery<Users> query = from(users);
        
        Path<?>[] paths = new Path<?>[] {users.firstName,users.lastName,users.account};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, users.firstName)
			.map(LAST_NAME, users.lastName)
			.map(ACCOUNT, users.account);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, users);
    }
    
}
